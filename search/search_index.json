{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the TBI Lab docs! Welcome! Here we'll find some documentation on how certain applications pertaining to the TBI lab. This is a collaborative document that can be added to at any time. The goal is to use this as a general hub for documention related to how to operate certain studies or certain software related to studies.","title":"Home"},{"location":"index.html#welcome-to-the-tbi-lab-docs","text":"Welcome! Here we'll find some documentation on how certain applications pertaining to the TBI lab. This is a collaborative document that can be added to at any time. The goal is to use this as a general hub for documention related to how to operate certain studies or certain software related to studies.","title":"Welcome to the TBI Lab docs!"},{"location":"eeg.html","text":"TBI lab EEG protocol Material 1 plastic bin 1 Emotiv Cap (54-56-58 sizes) 1 amplifier 1 bottle of saline 1 towel 1 glass cup 2 gauzes 34 felts 1 measuring tape 1 bottle of alcohol 1 bottle of Nuprep 1 Laptop w/ Emotiv Pro license already installed Prior session procedures: Measure head diameter from nasion to inion. Always rounding down. *for example: if a head is 57cm use size 56cm cap . Report length and type of hair (ex: short & thin or long & thick, etc.): this information will help to pick the most convenient felts size Felts: thin hair 8 mm felts (short) if thicker hair 12 mm felts (long) Pre-soak the felts: Submerge felts in saline solution for about 10 minutes prior to the EEG session (make sure we have all 34 felts). Put the amplifier on the cap: 56-58cm caps: amplifier in the back 54cm cap: amplifier on the top (Black lining on top, DRL and CMS as reference). Take out the soaked felts and place them on a towel. Press very smoothly/light taps with the towel to remove excess of saline solution. We still want the felts to be damp Flip the cap and start placing the felts in each hole. This will take about 5-7 minutes. PLEASE DO NOT RUSH! Make sure every felt is in each hole correctly. Session procedures: Ask participant to take off any piercings or earrings. Explain EEG briefly and answer potential questions. Exfoliate skin with Nuprep on forehead and mastoid regions prior to placing cap on head. One gauze for each side of the head. ONLY wipe unidirectional, i.e., one way. DO NOT wipe back and forth. Put on the Emotiv cap on smoothly and center it (look at front 2 sensors (Fp1 & Fp2) to help guide you). After the cap is centered, you must measure it to make sure that it is.\u202fUsing the centimeter side of the measuring tape, measure from the bridge of the nose (nasion) to the indent of the back of the head (anion). Electrode Cz should be in the middle of these two points. Next, measure from the middle of one ear to the other. Electrode holder Cz should again be in the middle of these two points. Have participant strap themselves in. Mention that \u201cit should be tight, but not uncomfortable.\u201d Turn amplifier on (button on the bottom of it). The light should turn on. The amplifier USB should be plugged in. Access laptop (Mark\u2019s account, password/pin: 11110) Open EmotivPRO app (username: 524yt5; password: Morris2024) Connect headset (red circle on the top of the screen) and connect. Control Box position: Assign where the amplifier is (back or top). Contact Quality: Start adding the solution in each electrode, use the squirt solution bottle. Always start with the 2 reference electrodes (black sensors labeled DRL & CMS). Both must be green. Move electrodes back and forth (shimmy) to improve contact. Must be 100% EEG quality: This is not as important as contact quality but is still necessary. Add saline/shimmy any other sensors that repeatedly show RED or GREY. Need to get 100% at least once. Electrodes Setup: Just click APPLY Show the participant the laptop screen and have them clinch their jaw & blink their eyes really quick. This is to give them visual feedback to decrease the artifacts generated by their movements such as blinking or activating face muscles. 10 minutes resting EEG: Say these instructions: \u201ca cross will appear in the middle of the screen. You will look at that for the next 5 minutes. The following 5 minutes we will do closed eyes, during those minutes you must not fall sleep. Try to be as relaxed as you can be. As if you're at a park bench on a nice summer day.\u201d Afterwards, dim the light and close the door. Once in the next-door room, open PDF fixation cross, plug in USB, send the PDF cross to the extended screen and press CONTROL + L to make the PDF full screen. Go back to participant room to make sure the fixation cross is full screen. Remind participant to be as relaxed and still as possible. Then go back to the next-door room to record. Start recording clicking on red dot on the bottom left of the screen Recording name: EO / EC Subject Name: Roybal_** Export data (motion, markers, demographics, EDF) Go to /Documents Add new files in /Roybal/New_participant (4 files or EC/4 files for EC) Copy folder in the cluster CLEANING 1 plastic bucket 1 glass jar 1 plastic baggie 1 clip Baby shampoo Distilled water Procedures We cannot allow the wires and amplifier to get wet, so the baggie will cover the wires, close it and bend it, and put the clip towards the end. Take out the amplifier and charge it after each session. Next, invert the cap and take out all the felts and put them in the glass jar. Don\u2019t squeeze too hard on the felts, they break easily. Take baby shampoo and put 3 squeezes in the bucket and 1 and half in the felts jar. Grab distilled water underneath the shelf and pour over top the felts and shake a round with finger to spread up the shampoo. Same procedure in bucket with cap inside. Enough submerged to wet everything and clean it, push it back and forth a couple of times. Always the wires outside. Keep both cap and felts ~10 minutes soaked. After 10 minutes, you rinse it three times, rinse also felts. Hang the cap from two sides and clip the wires on the top (to prevent the water to drips down). Rinse the felts, use paper towels to dry them tapping them gently. Put them back on the drawer in their own basket to dry out.","title":"EEG"},{"location":"login.html","text":"Login Username: Password: function login() { var username = document.getElementById('username').value; var password = document.getElementById('password').value; if (username === 'tbiadmin' && password === 'BrainImpact24') { localStorage.setItem('loggedIn', 'true'); window.location.href = 'index.html'; // Redirect to MkDocs index page } else { alert('Invalid credentials'); } }","title":"Login"},{"location":"login.html#login","text":"Username: Password: function login() { var username = document.getElementById('username').value; var password = document.getElementById('password').value; if (username === 'tbiadmin' && password === 'BrainImpact24') { localStorage.setItem('loggedIn', 'true'); window.location.href = 'index.html'; // Redirect to MkDocs index page } else { alert('Invalid credentials'); } }","title":"Login"},{"location":"roybal.html","text":"How to Manage Roybal This is going to be a long document so it'll be split up into chapters to make jumping to certain parts easy and simple Table of Contents Chapters Links 1. Installation Guides Installation Guides 2. Where to Find Everything Where to Find Everything 3. Running The Program Running The Program 4. Database Management Database Management 5. Misc Info Misc Info 1. Installation Guides Local Installation On your local computer, make sure you have the following things installed on your side: Bun: Bun is a Javascript runtime environment, its essentially a better version than Node.js if you're familiar with it You can install Bun through this link To run a javascript file, type in your terminal / command prompt the following: bun index.js Git: Visit the repo where the site is held and clone the repo to your computer MongoDB Compass: You could use the web browser too if that works out for you, I prefer the application itself From this Link you can access the collections (tables of data) through clicking on \"Browse Collections\". If you chose to use the application Compass, use the correct connection string: mongodb+srv://skyehigh:KR65fmTreB0LKVyc@cluster.evnujdo.mongodb.net/ If anything looks incorrect, you'll be tasked with fixing it. Usually someone will bring it up to you first. If you need any help figuring out how to fix something then let me know Cluster Installation Next lets check out what you need installed on your home page in the Discovery Cluster: Node To install node on the cluster we're gonna need some interesting workarounds since they don't provide it naturally. If you want any assistance going through these steps feel free to let me know Visit the git repo for NVM (Node Version Manager) and copy the installation line Should look like this curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash Log in to the cluster and run this install script in your home directory Run source ~/.bashrc to reset your terminal Type nvm install 16 , then nvm use 16 If it switches to node version 16, then you have succeeded! Reminder, every time you log to the cluster to do something with the site, ALWAYS RUN nvm use 16 PM2 Once you have node installed on the cluster, we're going to need to install the package that automatically runs the server for us on the cluster. While you're in Node Version 16 ( type in npm install pm2 ) When you install pm2, go to your home directory and enable the checkbox that says \"Show Dotfiles\" Find the .pm2 directory Enter the logs directory It may be empty right now, but when you use it, you'll see two files. The out file is where all of the print statements and console logging end up. The error file is where any application error ends up. Its good to know where these are for debugging purposes. 2. Where to Find Everything Code The code is currently on github, clone the repo and install all the dependencies you need from Node. In the cluster, the code is currently in the repo path of /work/cnelab/roybal/roybal-website/code Whenever you push a new change onto the website, you are refreshing the instance of the code being ran on the Vercel website hosting platform. Vercel is what we are using to host the platform in a viewable state, the cluster is being used to automate the timely procedures, such as data collection and reminder messages. As is practice, always remember to communicate when there is a new push to the codebase so we can make sure to pull the new changes to our own local. The database being used is MongoDB, a free cloud service database that the platform connects to send and retrieve information. You should have access to the database. You can connect either through the provided link : Database Link or through connecting through the MongoDB Compass application using the connection string: mongodb+srv://skyehigh:KR65fmTreB0LKVyc@cluster.evnujdo.mongodb.net/ . I prefer the app just because its easier to see and make quick edits as needed, but you're free to use whichever you're most comfy with 3. Running The Program Something VERY important to bring up is that even though the code you share is all synced up through git, the code in the cluster is not synced up. If you have a new change that DOES NOT AFFECTS THE AUTOMATED JOBS , then there is no need to keep them in sync. If you introduce a change to those automated Cron jobs, then you must change the code that is within the cluster and run pm2 restart index . This will restart the running application and reapply those new changes you've added. All of the work you need to do if it comes to bug fixing should be stuff you can do on your local. You will very rarely if ever need to update anything with PM2. Just in case though, its good to be prepared Most bug fixes will either be issues on the front end - back end information sending, or something in the database itself. Local I strongly recommend getting familiar with the index.js code file because that is the most intensive part of the website. It is where all the web routes are stored, where all the cron automated tasks occur, and where all the database processing occurs Most work on the local involves changing front-end code or changing anything in the index.js file, which is our server component to the website. Its the backend magic where everything happens. Sometimes there might be an issue where the data collection does not happen or a text reminder failed to send. What you can do in your local is this: Add one of the following lines to the END of the index.js file await fetchAndProcessData() for data collection await processPlans() for plan and reminder processing await processPoints() for point calculations (usually follows the one or both of the previous two) Once one or all of these lines are added, save the file and in your terminal run the command: bun index.js . This will execute these functions and update the database results. Once you are done, remove those lines from your code. We do not want these lines in the codebase, these are simply bug fix solutions If you have any more questions or need me to write more into this portion, feel free to let me know 4. Database Management The database is where all the fun and pain begins! Once you log in and click on \"browse collections\", you will see the Roybal database. The database is now serving two functions, and can continue to serve more as new studies get added in. For now lets focus on the Roybal specific collections In Mongo, a collection is essentially a table. I will be using Mongo terminology from this point onward. Here are the collections that are currently in the database as of June 10th 2024 Our main priorities are : - admin - stores the log in information for the website admin side. The correct log in for the Roybal admin site is the second data entry data - stores the daily data collection from the Fitbit API. This is the raw data we are getting from Fitbit and should not be touched unless there is a bug, let me know when this happens. health - currently empty, don't worry about it participants - holds participant information for data collection purposes. Sometimes a new participant may have an incorrect number, make sure everyone has their own unique number and that it increments correctly. This number is used in 2 other places too so ensure there is consistency between numbers and ID's plan - holds information on planned call days, planned activities, and activities that were done. This is used for point calculation and to update the calendar on a participants site. We link a participants ID and their contact information through their \"number\". Ensure consistency between number and ID and contact identifier sessions - stores website information, don't worry about it users - stores general purpose information about a user and their log in information. Make sure there is consistency between numbers and ID's weeklyPoints - stores each users weekly points to update their line graph Ensure there is consistency within the database, collaborate with each other and refer to me with any complications Missing Data Entries One of the biggest issues is sometimes a data entry will be missed. If this happens refer back to Running the Program for what code to add and how to run it. Sometimes the database will be missing an entry due to an issue with collection. This happens sometimes, feel free to let me know. What you need to do is manually insert a new document into the data collection. Click on \"ADD DATA\" then click on \"Insert New Document\". Below is a template on what to insert { \"user_id\": Insert Fitbit ID here (As a String), \"date\": Insert Date here (As a YYYY-MM-DD String), \"activities\": [ { \"activityId\": 90013, \"activityParentId\": 90013, \"activityParentName\": \"Walk\", \"calories\": 1829, \"description\": \"Walking less than 2 mph, strolling very slowly\", \"duration\": 14233000, \"hasActiveZoneMinutes\": true, \"hasStartTime\": true, \"isFavorite\": false, \"lastModified\": \"2024-06-06T00:14:36.000Z\", \"logId\": 63921524675, \"name\": \"Walk\", \"startDate\": Insert Date here (As a YYYY-MM-DD String), \"startTime\": \"15:57\", \"steps\": 22984 } ], \"goals\": { \"activeMinutes\": 30, \"caloriesOut\": 2602, \"distance\": 8.05, \"steps\": 10000 }, \"summary\": { \"activeScore\": -1, \"activityCalories\": 2442, \"caloriesBMR\": 1743, \"caloriesOut\": 3788, \"distances\": [ { \"activity\": \"total\", \"distance\": 19.22 }, { \"activity\": \"tracker\", \"distance\": 19.22 }, { \"activity\": \"loggedActivities\", \"distance\": 0 }, { \"activity\": \"veryActive\", \"distance\": 16.76 }, { \"activity\": \"moderatelyActive\", \"distance\": 0.72 }, { \"activity\": \"lightlyActive\", \"distance\": 1.71 }, { \"activity\": \"sedentaryActive\", \"distance\": 0 } ], \"fairlyActiveMinutes\": 26, \"heartRateZones\": [ { \"caloriesOut\": 1159.39162, \"max\": 112, \"min\": 30, \"minutes\": 539, \"name\": \"Out of Range\" }, { \"caloriesOut\": 1808.51534, \"max\": 140, \"min\": 112, \"minutes\": 236, \"name\": \"Fat Burn\" }, { \"caloriesOut\": 0, \"max\": 175, \"min\": 140, \"minutes\": 0, \"name\": \"Cardio\" }, { \"caloriesOut\": 0, \"max\": 220, \"min\": 175, \"minutes\": 0, \"name\": \"Peak\" } ], \"lightlyActiveMinutes\": 123, \"marginalCalories\": 1660, \"restingHeartRate\": 57, \"sedentaryMinutes\": 1060, \"steps\": 26447, \"veryActiveMinutes\": 231 } } After you do this, go into the plan collection and find the correct participant based on their participant number. Go to their completedUnplannedActivities field and then delete the date that corresponds to the date of the new data entry that you just added. Go to their completedPlannedActivities and add in the activity into the list. Here is a template for an activity { \"activityId\": 90013, \"activityParentId\": 90013, \"activityParentName\": \"Walk\", \"calories\": 1514, \"description\": \"Walking less than 2 mph, strolling very slowly\", \"duration\": 11929000, \"hasActiveZoneMinutes\": true, \"hasStartTime\": true, \"isFavorite\": false, \"lastModified\": \"2024-06-04T00:04:56.000Z\", \"logId\": 63877453590, \"name\": \"Walk\", \"startDate\": Insert Date here (As a YYYY-MM-DD String), \"startTime\": \"15:47\", \"steps\": 18848 }, After you do this, add the final two lines into the index.js file in the roybal codebase and run bun index.js : await processPlans() await processPoints() 5. Misc Info I can't actually think of anything but thanks for reading good luck out there soldiers o7. I'm always here to consult with so have no fear.","title":"Roybal"},{"location":"roybal.html#how-to-manage-roybal","text":"This is going to be a long document so it'll be split up into chapters to make jumping to certain parts easy and simple","title":"How to Manage Roybal"},{"location":"roybal.html#table-of-contents","text":"Chapters Links 1. Installation Guides Installation Guides 2. Where to Find Everything Where to Find Everything 3. Running The Program Running The Program 4. Database Management Database Management 5. Misc Info Misc Info","title":"Table of Contents"},{"location":"roybal.html#1-installation-guides","text":"","title":"1. Installation Guides"},{"location":"roybal.html#local-installation","text":"On your local computer, make sure you have the following things installed on your side: Bun: Bun is a Javascript runtime environment, its essentially a better version than Node.js if you're familiar with it You can install Bun through this link To run a javascript file, type in your terminal / command prompt the following: bun index.js Git: Visit the repo where the site is held and clone the repo to your computer MongoDB Compass: You could use the web browser too if that works out for you, I prefer the application itself From this Link you can access the collections (tables of data) through clicking on \"Browse Collections\". If you chose to use the application Compass, use the correct connection string: mongodb+srv://skyehigh:KR65fmTreB0LKVyc@cluster.evnujdo.mongodb.net/ If anything looks incorrect, you'll be tasked with fixing it. Usually someone will bring it up to you first. If you need any help figuring out how to fix something then let me know","title":"Local Installation"},{"location":"roybal.html#cluster-installation","text":"Next lets check out what you need installed on your home page in the Discovery Cluster: Node To install node on the cluster we're gonna need some interesting workarounds since they don't provide it naturally. If you want any assistance going through these steps feel free to let me know Visit the git repo for NVM (Node Version Manager) and copy the installation line Should look like this curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash Log in to the cluster and run this install script in your home directory Run source ~/.bashrc to reset your terminal Type nvm install 16 , then nvm use 16 If it switches to node version 16, then you have succeeded! Reminder, every time you log to the cluster to do something with the site, ALWAYS RUN nvm use 16 PM2 Once you have node installed on the cluster, we're going to need to install the package that automatically runs the server for us on the cluster. While you're in Node Version 16 ( type in npm install pm2 ) When you install pm2, go to your home directory and enable the checkbox that says \"Show Dotfiles\" Find the .pm2 directory Enter the logs directory It may be empty right now, but when you use it, you'll see two files. The out file is where all of the print statements and console logging end up. The error file is where any application error ends up. Its good to know where these are for debugging purposes.","title":"Cluster Installation"},{"location":"roybal.html#2-where-to-find-everything","text":"","title":"2. Where to Find Everything"},{"location":"roybal.html#code","text":"The code is currently on github, clone the repo and install all the dependencies you need from Node. In the cluster, the code is currently in the repo path of /work/cnelab/roybal/roybal-website/code Whenever you push a new change onto the website, you are refreshing the instance of the code being ran on the Vercel website hosting platform. Vercel is what we are using to host the platform in a viewable state, the cluster is being used to automate the timely procedures, such as data collection and reminder messages. As is practice, always remember to communicate when there is a new push to the codebase so we can make sure to pull the new changes to our own local. The database being used is MongoDB, a free cloud service database that the platform connects to send and retrieve information. You should have access to the database. You can connect either through the provided link : Database Link or through connecting through the MongoDB Compass application using the connection string: mongodb+srv://skyehigh:KR65fmTreB0LKVyc@cluster.evnujdo.mongodb.net/ . I prefer the app just because its easier to see and make quick edits as needed, but you're free to use whichever you're most comfy with","title":"Code"},{"location":"roybal.html#3-running-the-program","text":"Something VERY important to bring up is that even though the code you share is all synced up through git, the code in the cluster is not synced up. If you have a new change that DOES NOT AFFECTS THE AUTOMATED JOBS , then there is no need to keep them in sync. If you introduce a change to those automated Cron jobs, then you must change the code that is within the cluster and run pm2 restart index . This will restart the running application and reapply those new changes you've added. All of the work you need to do if it comes to bug fixing should be stuff you can do on your local. You will very rarely if ever need to update anything with PM2. Just in case though, its good to be prepared Most bug fixes will either be issues on the front end - back end information sending, or something in the database itself.","title":"3. Running The Program"},{"location":"roybal.html#local","text":"I strongly recommend getting familiar with the index.js code file because that is the most intensive part of the website. It is where all the web routes are stored, where all the cron automated tasks occur, and where all the database processing occurs Most work on the local involves changing front-end code or changing anything in the index.js file, which is our server component to the website. Its the backend magic where everything happens. Sometimes there might be an issue where the data collection does not happen or a text reminder failed to send. What you can do in your local is this: Add one of the following lines to the END of the index.js file await fetchAndProcessData() for data collection await processPlans() for plan and reminder processing await processPoints() for point calculations (usually follows the one or both of the previous two) Once one or all of these lines are added, save the file and in your terminal run the command: bun index.js . This will execute these functions and update the database results. Once you are done, remove those lines from your code. We do not want these lines in the codebase, these are simply bug fix solutions If you have any more questions or need me to write more into this portion, feel free to let me know","title":"Local"},{"location":"roybal.html#4-database-management","text":"The database is where all the fun and pain begins! Once you log in and click on \"browse collections\", you will see the Roybal database. The database is now serving two functions, and can continue to serve more as new studies get added in. For now lets focus on the Roybal specific collections In Mongo, a collection is essentially a table. I will be using Mongo terminology from this point onward. Here are the collections that are currently in the database as of June 10th 2024 Our main priorities are : - admin - stores the log in information for the website admin side. The correct log in for the Roybal admin site is the second data entry data - stores the daily data collection from the Fitbit API. This is the raw data we are getting from Fitbit and should not be touched unless there is a bug, let me know when this happens. health - currently empty, don't worry about it participants - holds participant information for data collection purposes. Sometimes a new participant may have an incorrect number, make sure everyone has their own unique number and that it increments correctly. This number is used in 2 other places too so ensure there is consistency between numbers and ID's plan - holds information on planned call days, planned activities, and activities that were done. This is used for point calculation and to update the calendar on a participants site. We link a participants ID and their contact information through their \"number\". Ensure consistency between number and ID and contact identifier sessions - stores website information, don't worry about it users - stores general purpose information about a user and their log in information. Make sure there is consistency between numbers and ID's weeklyPoints - stores each users weekly points to update their line graph Ensure there is consistency within the database, collaborate with each other and refer to me with any complications","title":"4. Database Management"},{"location":"roybal.html#missing-data-entries","text":"One of the biggest issues is sometimes a data entry will be missed. If this happens refer back to Running the Program for what code to add and how to run it. Sometimes the database will be missing an entry due to an issue with collection. This happens sometimes, feel free to let me know. What you need to do is manually insert a new document into the data collection. Click on \"ADD DATA\" then click on \"Insert New Document\". Below is a template on what to insert { \"user_id\": Insert Fitbit ID here (As a String), \"date\": Insert Date here (As a YYYY-MM-DD String), \"activities\": [ { \"activityId\": 90013, \"activityParentId\": 90013, \"activityParentName\": \"Walk\", \"calories\": 1829, \"description\": \"Walking less than 2 mph, strolling very slowly\", \"duration\": 14233000, \"hasActiveZoneMinutes\": true, \"hasStartTime\": true, \"isFavorite\": false, \"lastModified\": \"2024-06-06T00:14:36.000Z\", \"logId\": 63921524675, \"name\": \"Walk\", \"startDate\": Insert Date here (As a YYYY-MM-DD String), \"startTime\": \"15:57\", \"steps\": 22984 } ], \"goals\": { \"activeMinutes\": 30, \"caloriesOut\": 2602, \"distance\": 8.05, \"steps\": 10000 }, \"summary\": { \"activeScore\": -1, \"activityCalories\": 2442, \"caloriesBMR\": 1743, \"caloriesOut\": 3788, \"distances\": [ { \"activity\": \"total\", \"distance\": 19.22 }, { \"activity\": \"tracker\", \"distance\": 19.22 }, { \"activity\": \"loggedActivities\", \"distance\": 0 }, { \"activity\": \"veryActive\", \"distance\": 16.76 }, { \"activity\": \"moderatelyActive\", \"distance\": 0.72 }, { \"activity\": \"lightlyActive\", \"distance\": 1.71 }, { \"activity\": \"sedentaryActive\", \"distance\": 0 } ], \"fairlyActiveMinutes\": 26, \"heartRateZones\": [ { \"caloriesOut\": 1159.39162, \"max\": 112, \"min\": 30, \"minutes\": 539, \"name\": \"Out of Range\" }, { \"caloriesOut\": 1808.51534, \"max\": 140, \"min\": 112, \"minutes\": 236, \"name\": \"Fat Burn\" }, { \"caloriesOut\": 0, \"max\": 175, \"min\": 140, \"minutes\": 0, \"name\": \"Cardio\" }, { \"caloriesOut\": 0, \"max\": 220, \"min\": 175, \"minutes\": 0, \"name\": \"Peak\" } ], \"lightlyActiveMinutes\": 123, \"marginalCalories\": 1660, \"restingHeartRate\": 57, \"sedentaryMinutes\": 1060, \"steps\": 26447, \"veryActiveMinutes\": 231 } } After you do this, go into the plan collection and find the correct participant based on their participant number. Go to their completedUnplannedActivities field and then delete the date that corresponds to the date of the new data entry that you just added. Go to their completedPlannedActivities and add in the activity into the list. Here is a template for an activity { \"activityId\": 90013, \"activityParentId\": 90013, \"activityParentName\": \"Walk\", \"calories\": 1514, \"description\": \"Walking less than 2 mph, strolling very slowly\", \"duration\": 11929000, \"hasActiveZoneMinutes\": true, \"hasStartTime\": true, \"isFavorite\": false, \"lastModified\": \"2024-06-04T00:04:56.000Z\", \"logId\": 63877453590, \"name\": \"Walk\", \"startDate\": Insert Date here (As a YYYY-MM-DD String), \"startTime\": \"15:47\", \"steps\": 18848 }, After you do this, add the final two lines into the index.js file in the roybal codebase and run bun index.js : await processPlans() await processPoints()","title":"Missing Data Entries"},{"location":"roybal.html#5-misc-info","text":"I can't actually think of anything but thanks for reading good luck out there soldiers o7. I'm always here to consult with so have no fear.","title":"5. Misc Info"}]}